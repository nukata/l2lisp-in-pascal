;; -*- lisp -*-
(setq list (lambda (&rest x) x))
(setq progn (macro (&rest x) (list cond (cons t x))))

(setq defmacro
      (macro (name args &rest body)
             (list progn
                   (list setq name (cons macro (cons args body)))
                   (list quote name))))

(defmacro defun (name args &rest body)
  (list progn
        (list setq name (cons lambda (cons args body)))
        (list quote name)))

(defun caar (x) (car (car x)))
(defun cadr (x) (car (cdr x)))
(defun cdar (x) (cdr (car x)))
(defun cddr (x) (cdr (cdr x)))
(defun null (x) (eq x nil))
(defun not (x) (eq x nil))
(defun print (x) (prin1 x) (terpri) x)
(defun make-symbol (s) (list *symbol* s nil))

(defun > (x y) (< y x))
(defun >= (x y) (not (< x y)))
(defun <= (x y) (not (< y x)))
(defun = (x y) (eq x y))
(defun /= (x y) (not (= x y)))

(defmacro if (test then &rest else)
  (cons cond (cons (list test then)
                   (cond (else (list (cons t else)))))))

(defmacro let (args &rest body)
  ((lambda (vars vals)
     (defun vars (x)
       (if (null x) nil
         (cons (if (atom (car x)) (car x) (caar x))
               (vars (cdr x)))))
     (defun vals (x)
       (if (null x) nil
         (cons (if (atom (car x)) nil (cadr (car x)))
               (vals (cdr x)))))
     (cons (cons lambda (cons (vars args) body))
           (vals args)))
   nil nil))

(defun equal (x y)
  (cond ((atom x) (eq x y))
        ((atom y) nil)
        ((equal (car x) (car y))
         (equal (cdr x) (cdr y)))))

(defun mapcar (f x)
  (if (null x) nil
    (cons (f (car x))
          (mapcar f (cdr x)))))

(defun _append (x y)
  (if (null x) y
    (cons (car x) (_append (cdr x) y))))
(defmacro append (x &rest y)
  (if (null y) x
    (list '_append x (cons 'append y))))

(defmacro and (x &rest y)
  (if (null y) x
    (list cond
          (list x (cons 'and y)))))
(defmacro or (x &rest y)
  (if (null y) x
    (list cond
          (list x)
          (list (cons 'or y)))))

(defun stringp (x)
  (and (not (atom x))
       (eq (car x) *string*)))

(defun length (x)
  (let (f result)
    (defun f (y acc)
      (if (null y) acc
        (f (cdr y) (+ acc 1))))
    (setq result (f x 0))
    (if (stringp x)
        (- result 1)
      result)))

(let ((counter 0))
  (defun gensym ()
    (setq counter (+ counter 1))
    (let ((c counter) d4 d3 d2 d1)
      (setq d4 (/ c 1000) c (- c (* d4 1000))
            d3 (/ c 100)  c (- c (* d3 100))
            d2 (/ c 10)   c (- c (* d2 10))
            d1 c)
      (make-symbol
       (append "G" (mapcar (lambda (d) (+ d 48)) (list d4 d3 d2 d1)))))))

(defmacro while (test &rest body)
  (let ((a (gensym)))
    (list let (list a)
          (list setq a
                (list lambda ()
                      (list cond (cons test (append body (list (list a)))))))
          (list a))))
;;
